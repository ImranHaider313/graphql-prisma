type Query {
  posts(query: String): [Post!]!
  users(query: String): [User!]!
  comments(query: String): [Comment!]!
}

type Mutation {
  createUser(data: createUserInput!): AuthPayload!
  login(data: LoginUserInput): AuthPayload!
  createPost(data: createPostInput!): Post!
  createComment(data: createCommentInput!): Comment!
  deleteUser: User!
  deletePost(id: ID!): Post!
  deleteComment(id: ID!): Comment!
  updateUser(data: updateUserInput): User!
  updatePost(id: ID!, data: updatePostInput): Post!
  updateComment(id: ID!, data: updateCommentInput): Comment!
}

input LoginUserInput {
  email: String!
  password: String!
}
type Subscription {
  comment(postId: ID!): commentSubscriptionPayload!
  post: postSubscriptionPayload!
  myPost: postSubscriptionPayload!
}

input createUserInput {
  name: String!
  email: String!
  age: Int
  password: String!
}

type AuthPayload {
  token: String!
  user: User!

}
input updateUserInput {
  name: String
  email: String
  age: Int
  password: String
}

input createPostInput {
  title: String!
  body: String!
  published: Boolean!
}

input updatePostInput {
  title: String
  body: String
  published: Boolean
}

input createCommentInput {
  text: String!
  post: ID!
}

input updateCommentInput {
  text: String!
}

type User {
  id: ID!
  name: String!
  email: String
  password: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

type postSubscriptionPayload {
  mutation: String!
  node: Post!
}

type commentSubscriptionPayload {
  mutation: String!
  node: Comment! 
}
